{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Express Toolkit \u00b6 Express Toolkit is a collection of Node.js libraries built on Express. Mongoose ACL \u00b6 see details on Mongoose ACL","title":"Express Toolkit"},{"location":"#express-toolkit","text":"Express Toolkit is a collection of Node.js libraries built on Express.","title":"Express Toolkit"},{"location":"#mongoose-acl","text":"see details on Mongoose ACL","title":"Mongoose ACL"},{"location":"api-request-handler/","text":"API Request Handler \u00b6","title":"API Request Handler"},{"location":"api-request-handler/#api-request-handler","text":"","title":"API Request Handler"},{"location":"mongoose-acl/1.philosophy/","text":"Philosophy \u00b6 @egose/acl exposes REST API endpoints corresponding to mongoose data models in Express routes. It builds the backend database security layer by decorating mongoose queries, which enables dynamic frontend mongoose-like query options. Motivation \u00b6 REST (Representational State Transfer) is an API protocol which was introduced in a 2000, and is one of major API standards today. Besides its many benefits, there are also disadvantages to RESTful APIs. One of the disadvantages is that there is no good solution to manage object data at a fine-grained level unless opening up more API endpoints. Let's say we have a User model contains following fields: - name - address - roles - creditBalance - loginDate GET /users/{id} to retrieve an user entity identified by user ID By making a request to this endpoint, it will return the user's data including the 6 fields above. What if we want to allow selected fields depending on the requester's roles on the system? admin and member . Probably, we will include conditional logic at the backend to exclude fields that non-admin is not allowed to read. But, does it actually solve the cases we will have when building a web application? Even though admin is permitted to read all fields of the entity, some fields could be redundant for certain screens. To retrieve selected fields only, we might send more information to the API call, such as GET /users/{id}?include=partial[|all] . However, this approach will make the backend codebase messy soon as more screens require diffrent entity fields and more backend conditional logic to handle all possible cases. PUT /users/{id} to update an user entity identified by user ID Typically, UPDATE endpoint contains more complicated logic to prevent unwanted updates by wrong user types. For example, there might be a case that admin can update the first 5 fields while the user itself can update the first 3 fields only. If handling each scenario at the backend codebase, it will be inevitable to have multiple conditional logic depends on the complexity of the user types and the entity relationships. Concept \u00b6 The idea is to build a security boundary defined in a schema for each resource to be consumed at the backend routes; because this security layer works as a wrapper around the request information sent by the browser, it gives the frontend codebase the most flexibility to build queries and manage data within the given API endpoints by the library. Object permissions are checked if global permissions pass and define whether a user has the ability to perform a specific action on a single object. These are also known as row level permissions. Global Permissions Global permissions are system-wide and granted to authenticated users based on their roles and allow role-based access control (RBAC) to the backend system. Global permissions are expected in Express request object (e.g. req._permissions ) and used to apply access control to the system and resources. Document Permissions Document permissions are object-level privileges and defined to allow performing specific actions on a single Mongoose document . Role-based Security Document-level Security Field-level security Base Query Base queries are generated to decoreate Mongoose Query object to apply global permissions to a target collection. Mongoose Query Syntax Library API endpoints take a similar request structure as Mongoose Syntax , e.g. query, select, and populate, to reduce the learning curve of a new tool.","title":"Philosophy"},{"location":"mongoose-acl/1.philosophy/#philosophy","text":"@egose/acl exposes REST API endpoints corresponding to mongoose data models in Express routes. It builds the backend database security layer by decorating mongoose queries, which enables dynamic frontend mongoose-like query options.","title":"Philosophy"},{"location":"mongoose-acl/1.philosophy/#motivation","text":"REST (Representational State Transfer) is an API protocol which was introduced in a 2000, and is one of major API standards today. Besides its many benefits, there are also disadvantages to RESTful APIs. One of the disadvantages is that there is no good solution to manage object data at a fine-grained level unless opening up more API endpoints. Let's say we have a User model contains following fields: - name - address - roles - creditBalance - loginDate GET /users/{id} to retrieve an user entity identified by user ID By making a request to this endpoint, it will return the user's data including the 6 fields above. What if we want to allow selected fields depending on the requester's roles on the system? admin and member . Probably, we will include conditional logic at the backend to exclude fields that non-admin is not allowed to read. But, does it actually solve the cases we will have when building a web application? Even though admin is permitted to read all fields of the entity, some fields could be redundant for certain screens. To retrieve selected fields only, we might send more information to the API call, such as GET /users/{id}?include=partial[|all] . However, this approach will make the backend codebase messy soon as more screens require diffrent entity fields and more backend conditional logic to handle all possible cases. PUT /users/{id} to update an user entity identified by user ID Typically, UPDATE endpoint contains more complicated logic to prevent unwanted updates by wrong user types. For example, there might be a case that admin can update the first 5 fields while the user itself can update the first 3 fields only. If handling each scenario at the backend codebase, it will be inevitable to have multiple conditional logic depends on the complexity of the user types and the entity relationships.","title":"Motivation"},{"location":"mongoose-acl/1.philosophy/#concept","text":"The idea is to build a security boundary defined in a schema for each resource to be consumed at the backend routes; because this security layer works as a wrapper around the request information sent by the browser, it gives the frontend codebase the most flexibility to build queries and manage data within the given API endpoints by the library. Object permissions are checked if global permissions pass and define whether a user has the ability to perform a specific action on a single object. These are also known as row level permissions. Global Permissions Global permissions are system-wide and granted to authenticated users based on their roles and allow role-based access control (RBAC) to the backend system. Global permissions are expected in Express request object (e.g. req._permissions ) and used to apply access control to the system and resources. Document Permissions Document permissions are object-level privileges and defined to allow performing specific actions on a single Mongoose document . Role-based Security Document-level Security Field-level security Base Query Base queries are generated to decoreate Mongoose Query object to apply global permissions to a target collection. Mongoose Query Syntax Library API endpoints take a similar request structure as Mongoose Syntax , e.g. query, select, and populate, to reduce the learning curve of a new tool.","title":"Concept"},{"location":"mongoose-acl/2.quick-start/","text":"Quick Start \u00b6 Please have express and mongoose installed in advance. Installation \u00b6 $ npm install express-mongoose-acl $ yarn add express-mongoose-acl Quick Start \u00b6 Global Permissions \u00b6 Global Permissions are fundamental elements of role-based access control (RBAC) to the backend API endpoints. // create Mongoose models beforehand import macl from 'express-mongoose-acl'; macl.set('globalPermissions', function (req) { const user = req.user; if (!user) return { isGuest: true }; return { isGuest: false, isAdmin: user.roles.includes('admin'), isManager: user.roles.includes('manager'), }; }); It will set the global permission object to Express request object; request._permissions . To change the permission field name , update the global option permissionField : macl.set('permissionField', 'mypermissions'); Model Router \u00b6 To create pre-defined Express routes binding to a Mongoose model, simply create a model router: const userRouter = macl.createRouter('User', { baseUrl: 'users' }); The first argument must match a Mongoose model name created beforehand. Route Guard \u00b6 Route Guard applies role-based security and restricts access to the backend API endpoints based on the global permissions. The available routes are Create , Read , Update , Delete , and List (CRUDL); it only allows API requests with valid checks and excludes the omitted routes. There is more than one way to validate the access: boolean : true | false string : valid if the key returns true in the global permissions array : valid if any of the keys returns true in the global permissions function : valid if the function returns true userRouter.routeGuard({ list: true, read: ['isAdmin', 'isManager'], update: 'isAdmin', create: function (globalPermissions) { // `this` refers to Express request object if (globalPermissions.isAdmin) return true; return false; }, delete: false, }); Base Query \u00b6 Base Query applies document-level security to control access to individual documents in a collection. It decorates Mongoose Query object to define the permission guardrails based on the global permissions. userRouter.baseQuery({ list: function (permissions: Permissions) { return true; }, read: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { $or: [{ _id: this.user._id }, { roles: 'user' }] }; }, update: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { _id: this.user._id }; }, delete: function (permissions: Permissions) { return permissions.isAdmin; }, }); For example, in the case of non-admin updating the user of ID 123456 , it will generate a query as below behind the scenes: const query = { $and: [{ _id: this.user._id }, { _id: '123456' }] }; const result = await mongoose.model('User').findOne(query); Permission Schema \u00b6 Permission schema defines the fine-grained resource control mapping based on the global and optional document permissions. It applies field-level security to control access to individual fields within a document while Base Query works in document-level security . If no field-level security rule is defined for a field, the field is protected by all actions, list , read , update and create . userRouter.permissionSchema({ name: { list: true, read: true, update: 'edit.name', create: true }, roles: { list: ['isAdmin', 'isManager'], read: 'isAdmin', update: function (permissions: Permissions, docPermissions) { // `this` refers to Express request object if (docPermissions['edit.roles']) return true; return false; }, create: 'isAdmin', }, }); global permissions are available in all actions. document permissions are also available in update and create actions; for example, edit.name is a document permission generated by the router option docPermissions . Document Permissions \u00b6 Document permissions play a key role for field-level security and available in applicable middleware hooks. You can also find the document permissions in the frontend application and apply business logic in UI based on the permissions generated for the user. userRouter.docPermissions(function (docOrObject, permissions: Permissions) { const isMe = String(docOrObject._id) === String(this.user._id); return { 'edit.name': permissions.isAdmin || isMe, 'edit.roles': permissions.isAdmin, }; });","title":"Quick Start"},{"location":"mongoose-acl/2.quick-start/#quick-start","text":"Please have express and mongoose installed in advance.","title":"Quick Start"},{"location":"mongoose-acl/2.quick-start/#installation","text":"$ npm install express-mongoose-acl $ yarn add express-mongoose-acl","title":"Installation"},{"location":"mongoose-acl/2.quick-start/#quick-start_1","text":"","title":"Quick Start"},{"location":"mongoose-acl/2.quick-start/#global-permissions","text":"Global Permissions are fundamental elements of role-based access control (RBAC) to the backend API endpoints. // create Mongoose models beforehand import macl from 'express-mongoose-acl'; macl.set('globalPermissions', function (req) { const user = req.user; if (!user) return { isGuest: true }; return { isGuest: false, isAdmin: user.roles.includes('admin'), isManager: user.roles.includes('manager'), }; }); It will set the global permission object to Express request object; request._permissions . To change the permission field name , update the global option permissionField : macl.set('permissionField', 'mypermissions');","title":"Global Permissions"},{"location":"mongoose-acl/2.quick-start/#model-router","text":"To create pre-defined Express routes binding to a Mongoose model, simply create a model router: const userRouter = macl.createRouter('User', { baseUrl: 'users' }); The first argument must match a Mongoose model name created beforehand.","title":"Model Router"},{"location":"mongoose-acl/2.quick-start/#route-guard","text":"Route Guard applies role-based security and restricts access to the backend API endpoints based on the global permissions. The available routes are Create , Read , Update , Delete , and List (CRUDL); it only allows API requests with valid checks and excludes the omitted routes. There is more than one way to validate the access: boolean : true | false string : valid if the key returns true in the global permissions array : valid if any of the keys returns true in the global permissions function : valid if the function returns true userRouter.routeGuard({ list: true, read: ['isAdmin', 'isManager'], update: 'isAdmin', create: function (globalPermissions) { // `this` refers to Express request object if (globalPermissions.isAdmin) return true; return false; }, delete: false, });","title":"Route Guard"},{"location":"mongoose-acl/2.quick-start/#base-query","text":"Base Query applies document-level security to control access to individual documents in a collection. It decorates Mongoose Query object to define the permission guardrails based on the global permissions. userRouter.baseQuery({ list: function (permissions: Permissions) { return true; }, read: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { $or: [{ _id: this.user._id }, { roles: 'user' }] }; }, update: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { _id: this.user._id }; }, delete: function (permissions: Permissions) { return permissions.isAdmin; }, }); For example, in the case of non-admin updating the user of ID 123456 , it will generate a query as below behind the scenes: const query = { $and: [{ _id: this.user._id }, { _id: '123456' }] }; const result = await mongoose.model('User').findOne(query);","title":"Base Query"},{"location":"mongoose-acl/2.quick-start/#permission-schema","text":"Permission schema defines the fine-grained resource control mapping based on the global and optional document permissions. It applies field-level security to control access to individual fields within a document while Base Query works in document-level security . If no field-level security rule is defined for a field, the field is protected by all actions, list , read , update and create . userRouter.permissionSchema({ name: { list: true, read: true, update: 'edit.name', create: true }, roles: { list: ['isAdmin', 'isManager'], read: 'isAdmin', update: function (permissions: Permissions, docPermissions) { // `this` refers to Express request object if (docPermissions['edit.roles']) return true; return false; }, create: 'isAdmin', }, }); global permissions are available in all actions. document permissions are also available in update and create actions; for example, edit.name is a document permission generated by the router option docPermissions .","title":"Permission Schema"},{"location":"mongoose-acl/2.quick-start/#document-permissions","text":"Document permissions play a key role for field-level security and available in applicable middleware hooks. You can also find the document permissions in the frontend application and apply business logic in UI based on the permissions generated for the user. userRouter.docPermissions(function (docOrObject, permissions: Permissions) { const isMe = String(docOrObject._id) === String(this.user._id); return { 'edit.name': permissions.isAdmin || isMe, 'edit.roles': permissions.isAdmin, }; });","title":"Document Permissions"},{"location":"mongoose-acl/3.middleware/","text":"Middleware \u00b6 Validate \u00b6 Validate hooks are called before a new/update document data is processed in prepare hooks. This method is used to validate write data and throw an error if not valid; available in create and update operations. userRouter.validate({ create: function (docObject, permissions, context) { // add create validate logic const validated = validate(docObject); return validated; }, update: function (docObject, permissions, context) { // add update validate logic const validated = validate(docObject); return validated; }, }); or define individual hooks. userRouter.validate('create', function (docObject, permissions, context) { // add create validate logic const validated = validate(docObject); return validated; }); Prepare \u00b6 Prepare hooks are called before a new document is created or an existing document is updated. This method is used to process raw data passed into the API endpoints; available in create and update operations. userRouter.prepare({ create: function (docObject, permissions, context) { // add create prepare logic const processed = process(docObject); return processed; }, update: function (docObject, permissions, context) { // add update prepare logic const processed = process(docObject); return processed; }, }); or define individual hooks. userRouter.prepare('create', function (docObject, permissions, context) { // add create prepare logic const processed = process(docObject); return processed; }); Transform \u00b6 Transform hook is called before an updated document is saved. This method is only available in update operation. userRouter.transform(function (doc, permissions, context) { // add transform logic const processed = process(doc); return processed; }); Decorate \u00b6 Decorate hooks are called before response data is sent. This method is used to process raw data to apply custom logic before sending the result; available in list , read , create , update operations. userRouter.decorate({ list: function (docObject, permissions, context) { // add list decorate logic const processed = process(docObject); return processed; }, read: function (docObject, permissions, context) { // add read decorate logic const processed = process(docObject); return processed; }, create: function (docObject, permissions, context) { // add create decorate logic const processed = process(docObject); return processed; }, update: function (docObject, permissions, context) { // add update decorate logic const processed = process(docObject); return processed; }, }); or define individual hooks. userRouter.decorate('list', function (docObject, permissions, context) { // add list decorate logic const processed = process(docObject); return processed; }); Decorate All \u00b6 Decorate All hooks are called before response data is sent and after decorate middleware runs. This method is used to process and filter multiple document objects before sending the result; available in list operations only. userRouter.decorateAll(function (docObjects, permissions) { // add process logic const processed = process(docObjects); return processed; });","title":"Middleware"},{"location":"mongoose-acl/3.middleware/#middleware","text":"","title":"Middleware"},{"location":"mongoose-acl/3.middleware/#validate","text":"Validate hooks are called before a new/update document data is processed in prepare hooks. This method is used to validate write data and throw an error if not valid; available in create and update operations. userRouter.validate({ create: function (docObject, permissions, context) { // add create validate logic const validated = validate(docObject); return validated; }, update: function (docObject, permissions, context) { // add update validate logic const validated = validate(docObject); return validated; }, }); or define individual hooks. userRouter.validate('create', function (docObject, permissions, context) { // add create validate logic const validated = validate(docObject); return validated; });","title":"Validate"},{"location":"mongoose-acl/3.middleware/#prepare","text":"Prepare hooks are called before a new document is created or an existing document is updated. This method is used to process raw data passed into the API endpoints; available in create and update operations. userRouter.prepare({ create: function (docObject, permissions, context) { // add create prepare logic const processed = process(docObject); return processed; }, update: function (docObject, permissions, context) { // add update prepare logic const processed = process(docObject); return processed; }, }); or define individual hooks. userRouter.prepare('create', function (docObject, permissions, context) { // add create prepare logic const processed = process(docObject); return processed; });","title":"Prepare"},{"location":"mongoose-acl/3.middleware/#transform","text":"Transform hook is called before an updated document is saved. This method is only available in update operation. userRouter.transform(function (doc, permissions, context) { // add transform logic const processed = process(doc); return processed; });","title":"Transform"},{"location":"mongoose-acl/3.middleware/#decorate","text":"Decorate hooks are called before response data is sent. This method is used to process raw data to apply custom logic before sending the result; available in list , read , create , update operations. userRouter.decorate({ list: function (docObject, permissions, context) { // add list decorate logic const processed = process(docObject); return processed; }, read: function (docObject, permissions, context) { // add read decorate logic const processed = process(docObject); return processed; }, create: function (docObject, permissions, context) { // add create decorate logic const processed = process(docObject); return processed; }, update: function (docObject, permissions, context) { // add update decorate logic const processed = process(docObject); return processed; }, }); or define individual hooks. userRouter.decorate('list', function (docObject, permissions, context) { // add list decorate logic const processed = process(docObject); return processed; });","title":"Decorate"},{"location":"mongoose-acl/3.middleware/#decorate-all","text":"Decorate All hooks are called before response data is sent and after decorate middleware runs. This method is used to process and filter multiple document objects before sending the result; available in list operations only. userRouter.decorateAll(function (docObjects, permissions) { // add process logic const processed = process(docObjects); return processed; });","title":"Decorate All"},{"location":"mongoose-acl/4.workflow-lifecycle/","text":"Workflow Lifecycle \u00b6 List \u00b6 List operation executes hook methods in the following sequence: Hook Parameters Description docPermissions Mongoose document global permissions called after Mongoose execute the query; it runs on each document. decorate plain document object global permissions context object: docPermissions runs on each document object. decorateAll plain document objects global permissions runs on set of document objects. Read \u00b6 Read operation executes hook methods in the following sequence: Hook Parameters Description docPermissions Mongoose document global permissions called after Mongoose execute the query. decorate plain document object global permissions context object: docPermissions Update \u00b6 Update operation executes hook methods in the following sequence: Hook Parameters Description docPermissions Mongoose document global permissions called after Mongoose execute the query. validate allowed object global permissions context object: originalDoc , originalData , currentDoc prepare allowed object global permissions context object: originalDoc , originalData , currentDoc transform allowed object global permissions context object: originalDoc , originalData , currentDoc , preparedData , modifiedPaths called before changes saved. docPermissions Mongoose document global permissions context object: originalDoc , originalData , currentDoc , preparedData , modifiedPaths called after changes saved. decorate plain document object global permissions context object: originalDoc , originalData , currentDoc , preparedData , modifiedPaths , `docPermissions Create \u00b6 Create operation executes hook methods in the following sequence: Hook Parameters Description validate allowed object global permissions context object: originalData prepare allowed object global permissions context object: originalData docPermissions Mongoose document global permissions context object: originalData , preparedData called after a document created. decorate plain document object global permissions context object: originalData , preparedData","title":"Workflow Lifecycle"},{"location":"mongoose-acl/4.workflow-lifecycle/#workflow-lifecycle","text":"","title":"Workflow Lifecycle"},{"location":"mongoose-acl/4.workflow-lifecycle/#list","text":"List operation executes hook methods in the following sequence: Hook Parameters Description docPermissions Mongoose document global permissions called after Mongoose execute the query; it runs on each document. decorate plain document object global permissions context object: docPermissions runs on each document object. decorateAll plain document objects global permissions runs on set of document objects.","title":"List"},{"location":"mongoose-acl/4.workflow-lifecycle/#read","text":"Read operation executes hook methods in the following sequence: Hook Parameters Description docPermissions Mongoose document global permissions called after Mongoose execute the query. decorate plain document object global permissions context object: docPermissions","title":"Read"},{"location":"mongoose-acl/4.workflow-lifecycle/#update","text":"Update operation executes hook methods in the following sequence: Hook Parameters Description docPermissions Mongoose document global permissions called after Mongoose execute the query. validate allowed object global permissions context object: originalDoc , originalData , currentDoc prepare allowed object global permissions context object: originalDoc , originalData , currentDoc transform allowed object global permissions context object: originalDoc , originalData , currentDoc , preparedData , modifiedPaths called before changes saved. docPermissions Mongoose document global permissions context object: originalDoc , originalData , currentDoc , preparedData , modifiedPaths called after changes saved. decorate plain document object global permissions context object: originalDoc , originalData , currentDoc , preparedData , modifiedPaths , `docPermissions","title":"Update"},{"location":"mongoose-acl/4.workflow-lifecycle/#create","text":"Create operation executes hook methods in the following sequence: Hook Parameters Description validate allowed object global permissions context object: originalData prepare allowed object global permissions context object: originalData docPermissions Mongoose document global permissions context object: originalData , preparedData called after a document created. decorate plain document object global permissions context object: originalData , preparedData","title":"Create"},{"location":"mongoose-acl/5.api-endpoints/","text":"API Endpoints \u00b6 List Resources GET \u00b6 This entrypoint returns a set of resources. GET /{base_url} Parameters \u00b6 Name Type In Description limit number query The maximum number of documents page number query The page number of documents; starts from 1 include_permissions boolean query Whether to include document permissions in each document include_count boolean query Whether to include total results count lean boolean query Whether to pass plain objects, not Mongoose Documents, in middleware Example \u00b6 request \u00b6 curl \\ -H \"Accept: application/json\" \\ https://example.com/users?limit=100&page=5&include_permissions=false&include_count=false&lean=true response \u00b6 Status: 200 [ { \"name\": \"Andrew\", \"address\": \"5d6ede6a0ba62570afcedd3a\", \"roles\": [\"user\"], \"creditBalance\": 100, \"loginDate\": \"2022-02-22T02:02:22.679Z\" } ] List Resources POST \u00b6 This entrypoint returns a set of resources. POST /{base_url}/__query Parameters \u00b6 Name Type In Description query object body Mongoose Query object select object | array<string> body Document fields to include or exclude populate array<string> | array<object> body Document fields to populate sort object body Document sort order limit number body The maximum number of documents page number body The page number of documents; starts from 1 options.includePermissions boolean body Whether to include document permissions in each document options.includeCount boolean body Whether to include total results count options.populateAccess 'list' | 'read' body The access level to use in populate method options.lean boolean body Whether to pass plain objects, not Mongoose Documents, in middleware Example \u00b6 request \u00b6 curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users/__query \\ -d '{ \"query\": { \"loginDate\": { \"$gte\": \"2022-02-22T02:02:22.679Z\" } }, \"select\": [\"name\", \"address\"], \"populate\": [\"address\"], \"sort\": { \"createdAt\": -1 }, \"limit\": 100, \"page\": 5, \"options\": { \"includePermissions\": true, \"includeCount\": true, \"populateAccess\": \"list\", \"lean\": true } }' response \u00b6 Status: 200 { \"count\": 2, \"rows\": [ { \"_id\": \"5d6ede6a0ba62570afcedd3a\", \"name\": \"Mike\", \"address\": { \"city\": \"Seattle\", \"country\": \"USA\" }, \"_permissions\": { \"edit\": true } }, { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Jennifer\", \"address\": { \"city\": \"Vancouver\", \"country\": \"Canada\" }, \"_permissions\": { \"edit\": false } } ] } Create Resource POST \u00b6 This entrypoint creates a resource. POST /{base_url} Example \u00b6 request \u00b6 curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users \\ -d '{ \"name\": \"Jane\" }' response \u00b6 Status: 201 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Jane\", \"address\": null, \"roles\": [\"user\"], \"creditBalance\": 0, \"loginDate\": null } New Resource GET \u00b6 This entrypoint returns an empty resource and is used to retrieve sample data as a placeholder. GET /{base_url}/new Example \u00b6 request \u00b6 curl \\ -H \"Accept: application/json\" \\ https://example.com/users/new response \u00b6 Status: 200 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": null, \"address\": null, \"roles\": [\"user\"], \"creditBalance\": 0, \"loginDate\": null } Read Resource GET \u00b6 This entrypoint returns a target resource. GET /{base_url}/:id Parameters \u00b6 Name Type In Description id string param Resource identifier; defaults to Mongoose document ID include_permissions boolean query Whether to include document permissions in each document try_list boolean query Whether to attempt to retrieve the resource if not allowed lean boolean query Whether to pass plain objects, not Mongoose Documents, in middleware Example \u00b6 request \u00b6 curl \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b?try_list=true&include_permissions=false&lean=true response \u00b6 Status: 200 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Andrew\", \"address\": \"5d6ede6a0ba62570afcedd3a\", \"roles\": [\"user\"], \"creditBalance\": 100, \"loginDate\": \"2022-02-22T02:02:22.679Z\" } Read Resource POST \u00b6 This entrypoint returns a target resource. POST /{base_url}/:id Parameters \u00b6 Name Type In Description id string param Resource identifier; defaults to Mongoose document ID select object | array<string> body Document fields to include or exclude populate array<string> | array<object> body Document fields to populate options.includePermissions boolean body Whether to include document permissions in each document options.tryList boolean body Whether to attempt to retrieve the resource if not allowed options.populateAccess 'list' | 'read' body The access level to use in populate method options.lean boolean body Whether to pass plain objects, not Mongoose Documents, in middleware Example \u00b6 request \u00b6 curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b \\ -d '{ \"select\": [\"name\", \"address\"], \"populate\": [\"address\"], \"options\": { \"includePermissions\": true, \"tryList\": true, \"populateAccess\": \"list\", \"lean\": true } }' response \u00b6 Status: 200 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Andrew\", \"address\": { \"city\": \"Seattle\", \"country\": \"USA\" } } Update Resource PUT \u00b6 This entrypoint updates a target resource. PUT /{base_url}/:id Parameters \u00b6 Name Type In Description id string param Resource identifier; defaults to Mongoose document ID returning_all boolean query Whether to return entire document or partial document Example \u00b6 request \u00b6 curl \\ -X PUT \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b?returning_all=false \\ -d '{ \"name\": \"Andrew-2nd\" }' response \u00b6 Status: 200 { \"name\": \"Andrew-2nd\" } Delete Resource DELETE \u00b6 This entrypoint deletes a target resource. DELETE /{base_url}/:id Parameters \u00b6 Name Type In Description id string param Resource identifier; defaults to Mongoose document ID Example \u00b6 request \u00b6 curl \\ -X DELETE \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b response \u00b6 Status: 200 \"5d6ede6a0ba62570afcedd3b\" Distinct Field Values GET \u00b6 This entrypoint finds the distinct values for a specified field across a target collection and returns the results in an array. GET /{base_url}/distinct/:field Parameters \u00b6 Name Type In Description field string param The field for which to return distinct values Example \u00b6 request \u00b6 curl \\ -X GET \\ -H \"Accept: application/json\" \\ https://example.com/users/name response \u00b6 Status: 200 [\"Andrew\", \"Andrew-2nd\", \"Mike\"] Distinct Field Values POST \u00b6 This entrypoint finds the distinct values for a specified field across a target collection and returns the results in an array. POST /{base_url}/distinct/:field Parameters \u00b6 Name Type In Description field string param The field for which to return distinct values query string body Mongose query that specifies the match rules to retrieve the distinct values Example \u00b6 request \u00b6 curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users/name \\ -d '{ \"query\": { \"name\": { \"$regex\": \"drew\", \"$options\": \"i\" } } }' response \u00b6 Status: 200 [\"Andrew\", \"Andrew-2nd\"] Count Documents GET \u00b6 This entrypoint returns the count of documents that would match a query for the collection. GET /{base_url}/count Example \u00b6 request \u00b6 curl \\ -X GET \\ -H \"Accept: application/json\" \\ https://example.com/count response \u00b6 Status: 200 3 Count Documents POST \u00b6 This entrypoint returns the count of documents that would match a query for the collection. POST /{base_url}/distinct/:field Parameters \u00b6 Name Type In Description query string body Mongose query that specifies the match rules to retrieve the distinct values access 'list' | 'read' body The access level to use in find method Example \u00b6 request \u00b6 curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/count \\ -d '{ \"query\": { \"name\": { \"$regex\": \"drew\", \"$options\": \"i\" } }, \"access\": \"list\" }' response \u00b6 Status: 200 2","title":"API Endpoints"},{"location":"mongoose-acl/5.api-endpoints/#api-endpoints","text":"","title":"API Endpoints"},{"location":"mongoose-acl/5.api-endpoints/#list-resources-get","text":"This entrypoint returns a set of resources. GET /{base_url}","title":"List Resources GET"},{"location":"mongoose-acl/5.api-endpoints/#parameters","text":"Name Type In Description limit number query The maximum number of documents page number query The page number of documents; starts from 1 include_permissions boolean query Whether to include document permissions in each document include_count boolean query Whether to include total results count lean boolean query Whether to pass plain objects, not Mongoose Documents, in middleware","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request","text":"curl \\ -H \"Accept: application/json\" \\ https://example.com/users?limit=100&page=5&include_permissions=false&include_count=false&lean=true","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response","text":"Status: 200 [ { \"name\": \"Andrew\", \"address\": \"5d6ede6a0ba62570afcedd3a\", \"roles\": [\"user\"], \"creditBalance\": 100, \"loginDate\": \"2022-02-22T02:02:22.679Z\" } ]","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#list-resources-post","text":"This entrypoint returns a set of resources. POST /{base_url}/__query","title":"List Resources POST"},{"location":"mongoose-acl/5.api-endpoints/#parameters_1","text":"Name Type In Description query object body Mongoose Query object select object | array<string> body Document fields to include or exclude populate array<string> | array<object> body Document fields to populate sort object body Document sort order limit number body The maximum number of documents page number body The page number of documents; starts from 1 options.includePermissions boolean body Whether to include document permissions in each document options.includeCount boolean body Whether to include total results count options.populateAccess 'list' | 'read' body The access level to use in populate method options.lean boolean body Whether to pass plain objects, not Mongoose Documents, in middleware","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_1","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_1","text":"curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users/__query \\ -d '{ \"query\": { \"loginDate\": { \"$gte\": \"2022-02-22T02:02:22.679Z\" } }, \"select\": [\"name\", \"address\"], \"populate\": [\"address\"], \"sort\": { \"createdAt\": -1 }, \"limit\": 100, \"page\": 5, \"options\": { \"includePermissions\": true, \"includeCount\": true, \"populateAccess\": \"list\", \"lean\": true } }'","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_1","text":"Status: 200 { \"count\": 2, \"rows\": [ { \"_id\": \"5d6ede6a0ba62570afcedd3a\", \"name\": \"Mike\", \"address\": { \"city\": \"Seattle\", \"country\": \"USA\" }, \"_permissions\": { \"edit\": true } }, { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Jennifer\", \"address\": { \"city\": \"Vancouver\", \"country\": \"Canada\" }, \"_permissions\": { \"edit\": false } } ] }","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#create-resource-post","text":"This entrypoint creates a resource. POST /{base_url}","title":"Create Resource POST"},{"location":"mongoose-acl/5.api-endpoints/#example_2","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_2","text":"curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users \\ -d '{ \"name\": \"Jane\" }'","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_2","text":"Status: 201 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Jane\", \"address\": null, \"roles\": [\"user\"], \"creditBalance\": 0, \"loginDate\": null }","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#new-resource-get","text":"This entrypoint returns an empty resource and is used to retrieve sample data as a placeholder. GET /{base_url}/new","title":"New Resource GET"},{"location":"mongoose-acl/5.api-endpoints/#example_3","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_3","text":"curl \\ -H \"Accept: application/json\" \\ https://example.com/users/new","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_3","text":"Status: 200 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": null, \"address\": null, \"roles\": [\"user\"], \"creditBalance\": 0, \"loginDate\": null }","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#read-resource-get","text":"This entrypoint returns a target resource. GET /{base_url}/:id","title":"Read Resource GET"},{"location":"mongoose-acl/5.api-endpoints/#parameters_2","text":"Name Type In Description id string param Resource identifier; defaults to Mongoose document ID include_permissions boolean query Whether to include document permissions in each document try_list boolean query Whether to attempt to retrieve the resource if not allowed lean boolean query Whether to pass plain objects, not Mongoose Documents, in middleware","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_4","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_4","text":"curl \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b?try_list=true&include_permissions=false&lean=true","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_4","text":"Status: 200 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Andrew\", \"address\": \"5d6ede6a0ba62570afcedd3a\", \"roles\": [\"user\"], \"creditBalance\": 100, \"loginDate\": \"2022-02-22T02:02:22.679Z\" }","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#read-resource-post","text":"This entrypoint returns a target resource. POST /{base_url}/:id","title":"Read Resource POST"},{"location":"mongoose-acl/5.api-endpoints/#parameters_3","text":"Name Type In Description id string param Resource identifier; defaults to Mongoose document ID select object | array<string> body Document fields to include or exclude populate array<string> | array<object> body Document fields to populate options.includePermissions boolean body Whether to include document permissions in each document options.tryList boolean body Whether to attempt to retrieve the resource if not allowed options.populateAccess 'list' | 'read' body The access level to use in populate method options.lean boolean body Whether to pass plain objects, not Mongoose Documents, in middleware","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_5","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_5","text":"curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b \\ -d '{ \"select\": [\"name\", \"address\"], \"populate\": [\"address\"], \"options\": { \"includePermissions\": true, \"tryList\": true, \"populateAccess\": \"list\", \"lean\": true } }'","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_5","text":"Status: 200 { \"_id\": \"5d6ede6a0ba62570afcedd3b\", \"name\": \"Andrew\", \"address\": { \"city\": \"Seattle\", \"country\": \"USA\" } }","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#update-resource-put","text":"This entrypoint updates a target resource. PUT /{base_url}/:id","title":"Update Resource PUT"},{"location":"mongoose-acl/5.api-endpoints/#parameters_4","text":"Name Type In Description id string param Resource identifier; defaults to Mongoose document ID returning_all boolean query Whether to return entire document or partial document","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_6","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_6","text":"curl \\ -X PUT \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b?returning_all=false \\ -d '{ \"name\": \"Andrew-2nd\" }'","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_6","text":"Status: 200 { \"name\": \"Andrew-2nd\" }","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#delete-resource-delete","text":"This entrypoint deletes a target resource. DELETE /{base_url}/:id","title":"Delete Resource DELETE"},{"location":"mongoose-acl/5.api-endpoints/#parameters_5","text":"Name Type In Description id string param Resource identifier; defaults to Mongoose document ID","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_7","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_7","text":"curl \\ -X DELETE \\ -H \"Accept: application/json\" \\ https://example.com/users/5d6ede6a0ba62570afcedd3b","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_7","text":"Status: 200 \"5d6ede6a0ba62570afcedd3b\"","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#distinct-field-values-get","text":"This entrypoint finds the distinct values for a specified field across a target collection and returns the results in an array. GET /{base_url}/distinct/:field","title":"Distinct Field Values GET"},{"location":"mongoose-acl/5.api-endpoints/#parameters_6","text":"Name Type In Description field string param The field for which to return distinct values","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_8","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_8","text":"curl \\ -X GET \\ -H \"Accept: application/json\" \\ https://example.com/users/name","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_8","text":"Status: 200 [\"Andrew\", \"Andrew-2nd\", \"Mike\"]","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#distinct-field-values-post","text":"This entrypoint finds the distinct values for a specified field across a target collection and returns the results in an array. POST /{base_url}/distinct/:field","title":"Distinct Field Values POST"},{"location":"mongoose-acl/5.api-endpoints/#parameters_7","text":"Name Type In Description field string param The field for which to return distinct values query string body Mongose query that specifies the match rules to retrieve the distinct values","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_9","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_9","text":"curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/users/name \\ -d '{ \"query\": { \"name\": { \"$regex\": \"drew\", \"$options\": \"i\" } } }'","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_9","text":"Status: 200 [\"Andrew\", \"Andrew-2nd\"]","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#count-documents-get","text":"This entrypoint returns the count of documents that would match a query for the collection. GET /{base_url}/count","title":"Count Documents GET"},{"location":"mongoose-acl/5.api-endpoints/#example_10","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_10","text":"curl \\ -X GET \\ -H \"Accept: application/json\" \\ https://example.com/count","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_10","text":"Status: 200 3","title":"response"},{"location":"mongoose-acl/5.api-endpoints/#count-documents-post","text":"This entrypoint returns the count of documents that would match a query for the collection. POST /{base_url}/distinct/:field","title":"Count Documents POST"},{"location":"mongoose-acl/5.api-endpoints/#parameters_8","text":"Name Type In Description query string body Mongose query that specifies the match rules to retrieve the distinct values access 'list' | 'read' body The access level to use in find method","title":"Parameters"},{"location":"mongoose-acl/5.api-endpoints/#example_11","text":"","title":"Example"},{"location":"mongoose-acl/5.api-endpoints/#request_11","text":"curl \\ -X POST \\ -H \"Accept: application/json\" \\ https://example.com/count \\ -d '{ \"query\": { \"name\": { \"$regex\": \"drew\", \"$options\": \"i\" } }, \"access\": \"list\" }'","title":"request"},{"location":"mongoose-acl/5.api-endpoints/#response_11","text":"Status: 200 2","title":"response"},{"location":"mongoose-acl/6.options/","text":"Options \u00b6 Global Options \u00b6 Global options can be passed on to the express-mongoose-acl object itself. globalPermissions : see Quick Start - Global Permissions permissionField : the global permission field name, default to _permissions idParam : the name of Route parameter that is used to capture the document ID, default to id Model Router Options \u00b6 Router options can be passed on to the instance constructor or to the each setter methods. baseUrl listHardLimit permissionSchema : see Quick Start - Permission Schema permissionField mandatoryFields docPermissions : see Quick Start - Document Permissions routeGuard : see Quick Start - Route Guard baseQuery : see Quick Start - Base Query validate : see Middleware - Validate prepare : see Middleware - Prepare transform : see Middleware - Transform decorate : see Middleware - Decorate decorateAll : see Middleware - Decorate All identifier : this option defines how id param is used to find the target document, defaults to _id field; there is more than one way to define the relation: string : Mongoose document field key function : Function returns a Mongoose query to find the target document. userRouter.identifier(function (id) { return { $or: [{ _id: id }, { code: id }] }; });","title":"Options"},{"location":"mongoose-acl/6.options/#options","text":"","title":"Options"},{"location":"mongoose-acl/6.options/#global-options","text":"Global options can be passed on to the express-mongoose-acl object itself. globalPermissions : see Quick Start - Global Permissions permissionField : the global permission field name, default to _permissions idParam : the name of Route parameter that is used to capture the document ID, default to id","title":"Global Options"},{"location":"mongoose-acl/6.options/#model-router-options","text":"Router options can be passed on to the instance constructor or to the each setter methods. baseUrl listHardLimit permissionSchema : see Quick Start - Permission Schema permissionField mandatoryFields docPermissions : see Quick Start - Document Permissions routeGuard : see Quick Start - Route Guard baseQuery : see Quick Start - Base Query validate : see Middleware - Validate prepare : see Middleware - Prepare transform : see Middleware - Transform decorate : see Middleware - Decorate decorateAll : see Middleware - Decorate All identifier : this option defines how id param is used to find the target document, defaults to _id field; there is more than one way to define the relation: string : Mongoose document field key function : Function returns a Mongoose query to find the target document. userRouter.identifier(function (id) { return { $or: [{ _id: id }, { code: id }] }; });","title":"Model Router Options"},{"location":"mongoose-acl/7.usage/","text":"Usage \u00b6 Example \u00b6 import mongoose from 'mongoose'; import express from 'express'; import macl from 'express-mongoose-acl'; import { Permissions } from 'express-mongoose-acl/permission'; const router = express.Router(); mongoose.model( 'User', new mongoose.Schema({ name: { type: String }, address: { type: String }, roles: { type: String }, creditBalance: { type: Number }, loginDate: { type: Date }, }), ); macl.set('globalPermissions', function (req) { const user = req.user; if (!user) return { isGuest: true }; return { isGuest: false, isAdmin: user.roles.includes('admin'), isManager: user.roles.includes('manager'), }; }); const userRouter = macl.createRouter('User', { baseUrl: null }); userRouter.routeGuard({ list: true, read: ['isAdmin', 'isManager'], update: 'isAdmin', create: function (permissions: Permissions) { // `this` refers to Express request object if (permissions.isAdmin) return true; return false; }, delete: false, }); userRouter.baseQuery({ list: function (permissions: Permissions) { return true; }, read: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { $or: [{ _id: this.user._id }, { role: ['user'] }] }; }, update: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { _id: this.user._id }; }, delete: function (permissions: Permissions) { return permissions.isAdmin; }, }); userRouter.permissionSchema({ name: { list: true, read: true, update: 'edit.name', create: true }, roles: { list: ['isAdmin', 'isManager'], read: 'isAdmin', update: function (permissions: Permissions, docPermissions) { // `this` refers to Express request object if (docPermissions['edit.roles']) return true; return false; }, create: 'isAdmin', }, }); userRouter.docPermissions(function (docOrObject, permissions: Permissions) { const isMe = String(docOrObject._id) === String(this.user._id); return { 'edit.name': permissions.isAdmin || isMe, 'edit.roles': permissions.isAdmin, }; }); userRouter.prepare({ create: function (docObject, permissions: Permissions, context) { const { originalData } = context; // add create prepare function return docObject; }, update: function (docObject, permissions: Permissions, context) { const { originalDoc, originalData, currentDoc } = context; // add update prepare function return docObject; }, }); userRouter.transform(function (doc, permissions: Permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths } = context; // add transform function return doc; }); userRouter.decorate({ list: function (docObject, permissions: Permissions, context) { const { docPermissions } = context; // add list decorator function return docObject; }, read: function (docObject, permissions: Permissions, context) { const { docPermissions } = context; // add read decorator function return docObject; }, create: function (docObject, permissions: Permissions, context) { const { originalData, preparedData, docPermissions } = context; // add create decorator function return docObject; }, update: function (docObject, permissions: Permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths, docPermissions } = context; // add update decorator function return docObject; }, }); userRouter.decorateAll(function (docObjects, permissions: Permissions) { // add decorator-all function return docObjects; }); userRouter.identifier(function (id) { return { name: id }; }); router.use('/api/users', userRouter.routes);","title":"Usage"},{"location":"mongoose-acl/7.usage/#usage","text":"","title":"Usage"},{"location":"mongoose-acl/7.usage/#example","text":"import mongoose from 'mongoose'; import express from 'express'; import macl from 'express-mongoose-acl'; import { Permissions } from 'express-mongoose-acl/permission'; const router = express.Router(); mongoose.model( 'User', new mongoose.Schema({ name: { type: String }, address: { type: String }, roles: { type: String }, creditBalance: { type: Number }, loginDate: { type: Date }, }), ); macl.set('globalPermissions', function (req) { const user = req.user; if (!user) return { isGuest: true }; return { isGuest: false, isAdmin: user.roles.includes('admin'), isManager: user.roles.includes('manager'), }; }); const userRouter = macl.createRouter('User', { baseUrl: null }); userRouter.routeGuard({ list: true, read: ['isAdmin', 'isManager'], update: 'isAdmin', create: function (permissions: Permissions) { // `this` refers to Express request object if (permissions.isAdmin) return true; return false; }, delete: false, }); userRouter.baseQuery({ list: function (permissions: Permissions) { return true; }, read: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { $or: [{ _id: this.user._id }, { role: ['user'] }] }; }, update: function (permissions: Permissions) { if (permissions.isAdmin) return {}; else return { _id: this.user._id }; }, delete: function (permissions: Permissions) { return permissions.isAdmin; }, }); userRouter.permissionSchema({ name: { list: true, read: true, update: 'edit.name', create: true }, roles: { list: ['isAdmin', 'isManager'], read: 'isAdmin', update: function (permissions: Permissions, docPermissions) { // `this` refers to Express request object if (docPermissions['edit.roles']) return true; return false; }, create: 'isAdmin', }, }); userRouter.docPermissions(function (docOrObject, permissions: Permissions) { const isMe = String(docOrObject._id) === String(this.user._id); return { 'edit.name': permissions.isAdmin || isMe, 'edit.roles': permissions.isAdmin, }; }); userRouter.prepare({ create: function (docObject, permissions: Permissions, context) { const { originalData } = context; // add create prepare function return docObject; }, update: function (docObject, permissions: Permissions, context) { const { originalDoc, originalData, currentDoc } = context; // add update prepare function return docObject; }, }); userRouter.transform(function (doc, permissions: Permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths } = context; // add transform function return doc; }); userRouter.decorate({ list: function (docObject, permissions: Permissions, context) { const { docPermissions } = context; // add list decorator function return docObject; }, read: function (docObject, permissions: Permissions, context) { const { docPermissions } = context; // add read decorator function return docObject; }, create: function (docObject, permissions: Permissions, context) { const { originalData, preparedData, docPermissions } = context; // add create decorator function return docObject; }, update: function (docObject, permissions: Permissions, context) { const { originalDoc, originalData, currentDoc, preparedData, modifiedPaths, docPermissions } = context; // add update decorator function return docObject; }, }); userRouter.decorateAll(function (docObjects, permissions: Permissions) { // add decorator-all function return docObjects; }); userRouter.identifier(function (id) { return { name: id }; }); router.use('/api/users', userRouter.routes);","title":"Example"}]}